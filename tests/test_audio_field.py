import base64
import tempfile

import pytest
from sqlalchemy import Column, Integer, String, select
from sqlalchemy.orm import Session, declarative_base
from sqlalchemy_file.exceptions import ContentTypeValidationError, InvalidAudioError
from sqlalchemy_file.storage import StorageManager
from sqlalchemy_file.types import AudioField

from tests.utils import get_test_container, get_test_engine

engine = get_test_engine()
Base = declarative_base()


@pytest.fixture
def fake_text_file():
    file = tempfile.NamedTemporaryFile(suffix=".txt")
    file.write(b"Trying to save text file as audio")
    file.seek(0)
    return file


@pytest.fixture
def fake_invalid_audio():
    file = tempfile.NamedTemporaryFile(suffix=".mp3")
    file.write(b"Pass through content type validation")
    file.seek(0)
    return file


@pytest.fixture
def fake_valid_audio_content():
    return base64.b64decode(
        "//vUxAADwAABpAAAACAAADSAAAAETEFNRQMACQgvUxAADwAABpAAAACAAADSAAAAETEFNRQMACQgvUxAADwAABpAAAACAAADSAAAAETEFNRQMACQgvUxAAAAAABpBQAACfbxBtDP+AAV4lWYsEA9mNYkf5qY8YGYo8SgKxqtMfLDqTEIAQgzN5IOMzuMMWPI+GHOizpivIWqZJYDaGYnEsRQAwjEbxS3RmyBaHK0SGc90R4KAIJgEE4zGxFNNo5Zg0zkEjTyWZMy4C4wLEhy+DeQ2ZZgiBjmEjGY0c4a1TSJlaqpGmKPt1jzqp1qvMzIYwzDSVzFpA7MMoJwzizHzJ6NVMhk3YzYUajMRMaMKQR15GX15p+FODLZKPMd0L8wNAOzELG7Md8P8zpi7jDzEiM3M6gxgDETNmLNMewKYw8i0XmVwvx37kvqGQQIQYB4KZlpEtGPsNEYlgPhgkgQhACZnaHoma8ZaYP4hBgeCImJsMGYFIIhgXgFc5vPvP+HzAtAtCANy4hgdgMo7BwABctXhgGgYGDeE8YL4GBgHgWBgAxgCAKpTf/////+WzTXbSG5G69JTo+NcZWIwCDACAJFgBxEAQtQwBwHRCAClcnR//zn////+4i7y4aA9AYrYlYHABwRFE643FxIA4qgLhgGIsAav4wGQCCYDYBAMJbhwBpgCgJGA6AGOAPf/////////////////////tPaWtcvAXIXpC1oLUZWuu+7cDxgu21f//////////yYE0wBwNZcAgAlUxGAHGwgCchALLxlshoDNDmCADEz1vFYAKYgpqKBgASEAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
    )


@pytest.fixture
def fake_valid_audio(fake_valid_audio_content):
    file = tempfile.NamedTemporaryFile(suffix=".mp3")
    data = fake_valid_audio_content
    file.write(data)
    file.seek(0)
    return file


class AudioBook(Base):
    __tablename__ = "audiobook"

    id = Column(Integer, autoincrement=True, primary_key=True)
    title = Column(String(100), unique=True)
    audio = Column(AudioField)

    def __repr__(self):
        return f"<AudioBook: id {self.id} ; name: {self.title}; audio {self.audio};>"  # pragma: no cover


class TestAudioField:
    def setup_method(self, method) -> None:
        Base.metadata.create_all(engine)
        StorageManager._clear()
        StorageManager.add_storage("test", get_test_container("test-audio-field"))

    def test_autovalidate_content_type(self, fake_text_file) -> None:
        with Session(engine) as session:
            session.add(AudioBook(title="Pointless Meetings", audio=fake_text_file))
            with pytest.raises(ContentTypeValidationError):
                session.flush()

    def test_autovalidate_audio(self, fake_invalid_audio) -> None:
        with Session(engine) as session:
            session.add(AudioBook(title="Pointless Meetings", audio=fake_invalid_audio))
            with pytest.raises(InvalidAudioError):
                session.flush()

    def test_create_image(self, fake_valid_audio, fake_valid_audio_content) -> None:
        with Session(engine) as session:
            session.add(AudioBook(title="Pointless Meetings", audio=fake_valid_audio))
            session.flush()
            book = session.execute(
                select(AudioBook).where(AudioBook.title == "Pointless Meetings")
            ).scalar_one()
            assert book.audio.file.read() == fake_valid_audio_content
            assert book.audio["duration"] is not None

    def teardown_method(self, method):
        for obj in StorageManager.get().list_objects():
            obj.delete()
        StorageManager.get().delete()
        Base.metadata.drop_all(engine)
